;; ctrl+space+esc to reload!
#|
This configuration will process all keys pressed inside of kanata, even if
they are not mapped in defsrc. This is so that certain actions can activate
at the right time for certain input sequences. By default, unmapped keys are
not processed through kanata due to a Windows issue related to AltGr. If you
use AltGr in your keyboard, you will likely want to follow the simple.kbd
file while unmapping lctl and ralt from defsrc.
|#
;; (defcfg
;;   process-unmapped-keys yes
;; )

(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft      up
  fn   lctl lmet lalt           spc            ralt rmet rctl left down rght
)

(deflayer qwerty_restricted
  esc  🔅   🔆    nop0 nop1 nop2 nop3 ◀◀   ▶⏸   ▶▶   🔇   🔉   🔊
  @grl 1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @cap @a   @s   @d   @f   @g   h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    @m   @,   @.   @/   rsft      nop0
  caps  nop4 nop5 nop6           spc            nop7 nop8 nop9 nop0 nop0 nop0
)

(deflayer qwerty
  esc  🔅   🔆    nop0 nop1 nop2 nop3 ◀◀   ▶⏸   ▶▶   🔇   🔉   🔊
  @grl 1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @cap @a   @s   @d   @f   @g   h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    @m   @,   @.   @/   rsft      up
  caps  lctl lmet lalt           spc            ralt rmet rctl left down rght
)

(deflayer dvorak
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  @grl 1    2    3    4    5    6    7    8    9    0    [    ]    bspc
  tab  '    ,    .    p    y    f    g    c    r    l    /    =    \
  @cap a    o    e    u    i    d    h    t    n    s    -    ret
  lsft ;    q    j    k    x    b    m    w    v    z    rsft      up
  caps  lctl lmet lalt           spc            ralt rmet rctl left down rght
)

;; The `lrld` action stands for "live reload". This will re-parse everything
;; except for linux-dev, meaning you cannot live reload and switch keyboard
;; devices.
(deflayer layers
  _    f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  _    @qwr @qw  @dvk lrld _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _         _
  _    _    _    _              _              _    _    _    _    _    _
)

(deflayer arrows
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    left down up   rght _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _         _
  _    _    _    _              _              _    _    _    _    _    _
)

(defvar
  tap-time 150
  hold-time 150
)

(defalias
  ;; tap: backtick (grave), hold: toggle layer-switching layer while held
  grl (tap-hold $tap-time $hold-time grv (layer-toggle layers))
  fn (tap-hold $tap-time $hold-time caps (layer-toggle layers))

  ;; layer-switch changes the base layer.
  qwr (layer-switch qwerty_restricted)
  qw (layer-switch qwerty)
  dvk (layer-switch dvorak)

  ;; tap for esc, hold for lctl
  cap (tap-hold $tap-time 200 esc lctl)

  ;; home row modifiers
  a (tap-hold $tap-time $hold-time a lsft)
  s (tap-hold $tap-time $hold-time s lctl)
  d (tap-hold $tap-time $hold-time d lalt)
  f (tap-hold $tap-time $hold-time f lmet)
  m (tap-hold $tap-time $hold-time m rmet)
  , (tap-hold $tap-time $hold-time , ralt)
  . (tap-hold $tap-time $hold-time . rctl)
  / (tap-hold $tap-time $hold-time / rsft)

  ;; arrow toggle
  g (tap-hold $tap-time $hold-time g (layer-toggle arrows))
)
